reshape2::melt(as.matrix(rej_mat)) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range) %$% value
reshape2::melt(as.matrix(rej_mat)) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range) %>% select(value)
reshape2::melt(as.matrix(rej_mat)) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range) %>% select(value) %>% range
diff_molten[,diff_molten$value < 0]
head(diff_molten)
diff_molten[diff_molten$value < 0,]
plot_rej_vs_diffs <-
function(infiles1,
infiles2,
rejections_file,
resolution,
condition_names = NULL,
offset = TRUE,
sub_range = NULL,
absolute = FALSE) {
# THIS FUNCTION DOWNSAMPLES THE DATA TO EQUAL READS FOR MORE ACCURATE COMPARISON
# infiles1, infiles2: vector/list of paths to input files for both conditions
# rejection_file: file output from test_with_FDR or test_with_FDX
# resolution: resolution of the data in base pairs, e.g. 50000
# condition names: names for axes of the heatmap
# offset: are the data 0-indexed?
# sub_range: sub index to be plotted
if (is.null(condition_names)) {
condition_names <- c("condition 1", "condition 2")
}
d <- c(
purrr::map(infiles1,
~ readr::read_tsv(.x, col_names = FALSE)) %>%
setNames(paste0("cond1_rep", seq_along(infiles1))),
purrr::map(infiles2,
~ readr::read_tsv(.x, col_names = FALSE)) %>%
setNames(paste0("cond2_rep", seq_along(infiles2)))
)
cond1 <- grep("cond1", names(d))
cond2 <- grep("cond2", names(d))
# Ensure consistent dimensions across replicates
offset <- as.numeric(offset)
maxdim <-
max(map_dbl(d, ~ max(.x$X1, .x$X2))) / resolution + offset
if (is.null(sub_range)) {
sub_range <- 1:maxdim
} else {
sub_range <-
round(sub_range[1] / resolution):round(sub_range[2] / resolution)
}
# must be lower-tri
dmat <-
purrr::map(
d,
~ Matrix::sparseMatrix(
i = .x$X2 / resolution + offset,
j = .x$X1 / resolution + offset,
x = round(.x$X3),
dims = rep(maxdim, 2)
)
)
d1 <- Reduce(`+`, dmat[cond1])
d2 <- Reduce(`+`, dmat[cond2])
rm(d)
rm(dmat)
dd <- downsample_to_equal_reads(list(d1, d2))
if(absolute) {
abs_diffs <- abs(dd[[1]] - dd[[2]])
} else {
abs_diffs <- dd[[1]] - dd[[2]]
}
rejections <- readRDS(rejections_file)
winsizes <- as.numeric(names(rejections))
if(!any(map_lgl(map(rejections, "reject"), any))) {
stop(paste0("No rejections are contained in file ", rejections_file, "."))
} else {
init_idx <- which(map_lgl(map(rejections, "reject"), any))[1]
rej_mat <- Matrix::sparseMatrix(
i = rejections[[init_idx]]$crd[which(rejections[[init_idx]]$reject)[1]],
j = rejections[[init_idx]]$crd[which(rejections[[init_idx]]$reject)[1]] + 1,
x = 1,
dims = rep(maxdim, 2)
)
for(j in seq_along(rejections)) {
if (any(rejections[[j]]$reject)) {
win_size <- winsizes[j]
rej_mat <- cpopulate_rejected_differences(
rej_mat,
rejections[[j]]$crd[rejections[[j]]$reject] - 1, win_size
)
}
}
#-------------------------------------------------------------------
# Make triangular (without diagonal) to make accurate comparisons
# Lower tri is the absolute differences between conditions,
#   upper tri are the rejections by given method
rej_mat <- Matrix::triu(rej_mat, 1)
diff_molten <- reshape2::melt(abs_diffs) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range)
rej_molten <- reshape2::melt(as.matrix(rej_mat)) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range)
#-------------------------------------------------------------------
# plot
if(absolute) {
labels <- c(paste0("|", paste0(condition_names, collapse = "-"), "|"), "rejections")
} else {
labels <- c(paste0(condition_names, collapse = "-"), "rejections")
}
if(absolute) {
rej_p <- ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = log2(value + 1)
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
theme_minimal() +
labs(x = labels[1], y = labels[2]) +
theme(legend.position = "none")
} else {
diff_molten[diff_molten$value < 0,] <- -log2(abs(diff_molten[diff_molten$value < 0,]))
rej_p <- ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = value
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_distiller(palette = "RdBu", na.value = "white") +
theme_minimal() +
labs(x = labels[1], y = labels[2]) +
theme(legend.position = "none")
}
return(rej_p)
}
}
plot_rej_vs_diffs(
infiles1 = ko_data,
infiles2 = parent_data,
rejections_file = "../inst/extdata/output/wfdr.rds",
resolution = 40000,
condition_names = c("knockout", "parent")
)
debug(plot_rej_vs_diffs)
plot_rej_vs_diffs(
infiles1 = ko_data,
infiles2 = parent_data,
rejections_file = "../inst/extdata/output/wfdr.rds",
resolution = 40000,
condition_names = c("knockout", "parent")
)
diff_molten
diff_molten$value
range(diff_molten$value)
plot_rej_vs_diffs <-
function(infiles1,
infiles2,
rejections_file,
resolution,
condition_names = NULL,
offset = TRUE,
sub_range = NULL,
absolute = FALSE) {
# THIS FUNCTION DOWNSAMPLES THE DATA TO EQUAL READS FOR MORE ACCURATE COMPARISON
# infiles1, infiles2: vector/list of paths to input files for both conditions
# rejection_file: file output from test_with_FDR or test_with_FDX
# resolution: resolution of the data in base pairs, e.g. 50000
# condition names: names for axes of the heatmap
# offset: are the data 0-indexed?
# sub_range: sub index to be plotted
if (is.null(condition_names)) {
condition_names <- c("condition 1", "condition 2")
}
d <- c(
purrr::map(infiles1,
~ readr::read_tsv(.x, col_names = FALSE)) %>%
setNames(paste0("cond1_rep", seq_along(infiles1))),
purrr::map(infiles2,
~ readr::read_tsv(.x, col_names = FALSE)) %>%
setNames(paste0("cond2_rep", seq_along(infiles2)))
)
cond1 <- grep("cond1", names(d))
cond2 <- grep("cond2", names(d))
# Ensure consistent dimensions across replicates
offset <- as.numeric(offset)
maxdim <-
max(map_dbl(d, ~ max(.x$X1, .x$X2))) / resolution + offset
if (is.null(sub_range)) {
sub_range <- 1:maxdim
} else {
sub_range <-
round(sub_range[1] / resolution):round(sub_range[2] / resolution)
}
# must be lower-tri
dmat <-
purrr::map(
d,
~ Matrix::sparseMatrix(
i = .x$X2 / resolution + offset,
j = .x$X1 / resolution + offset,
x = round(.x$X3),
dims = rep(maxdim, 2)
)
)
d1 <- Reduce(`+`, dmat[cond1])
d2 <- Reduce(`+`, dmat[cond2])
rm(d)
rm(dmat)
dd <- downsample_to_equal_reads(list(d1, d2))
if(absolute) {
abs_diffs <- abs(dd[[1]] - dd[[2]])
} else {
abs_diffs <- dd[[1]] - dd[[2]]
}
rejections <- readRDS(rejections_file)
winsizes <- as.numeric(names(rejections))
if(!any(map_lgl(map(rejections, "reject"), any))) {
stop(paste0("No rejections are contained in file ", rejections_file, "."))
} else {
init_idx <- which(map_lgl(map(rejections, "reject"), any))[1]
rej_mat <- Matrix::sparseMatrix(
i = rejections[[init_idx]]$crd[which(rejections[[init_idx]]$reject)[1]],
j = rejections[[init_idx]]$crd[which(rejections[[init_idx]]$reject)[1]] + 1,
x = 1,
dims = rep(maxdim, 2)
)
for(j in seq_along(rejections)) {
if (any(rejections[[j]]$reject)) {
win_size <- winsizes[j]
rej_mat <- cpopulate_rejected_differences(
rej_mat,
rejections[[j]]$crd[rejections[[j]]$reject] - 1, win_size
)
}
}
#-------------------------------------------------------------------
# Make triangular (without diagonal) to make accurate comparisons
# Lower tri is the absolute differences between conditions,
#   upper tri are the rejections by given method
rej_mat <- Matrix::triu(rej_mat, 1)
diff_molten <- reshape2::melt(abs_diffs) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range)
rej_molten <- reshape2::melt(as.matrix(rej_mat)) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range)
#-------------------------------------------------------------------
# plot
if(absolute) {
labels <- c(paste0("|", paste0(condition_names, collapse = "-"), "|"), "rejections")
} else {
labels <- c(paste0(condition_names, collapse = "-"), "rejections")
}
if(absolute) {
rej_p <- ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = log2(value + 1)
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
theme_minimal() +
labs(x = labels[1], y = labels[2]) +
theme(legend.position = "none")
} else {
diff_molten[diff_molten$value < 0,] <- -log2(abs(diff_molten[diff_molten$value < 0,]))
diff_molten[diff_molten$value > 0,] <- log2(diff_molten[diff_molten$value > 0,])
rej_p <- ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = value
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_distiller(palette = "RdBu", na.value = "white") +
theme_minimal() +
labs(x = labels[1], y = labels[2]) +
theme(legend.position = "none")
}
return(rej_p)
}
}
plot_rej_vs_diffs(
infiles1 = ko_data,
infiles2 = parent_data,
rejections_file = "../inst/extdata/output/wfdr.rds",
resolution = 40000,
condition_names = c("knockout", "parent")
)
debug(plot_rej_vs_diffs)
plot_rej_vs_diffs(
infiles1 = ko_data,
infiles2 = parent_data,
rejections_file = "../inst/extdata/output/wfdr.rds",
resolution = 40000,
condition_names = c("knockout", "parent")
)
diff_molten$value
range(diff_molten$value)
rej_p
ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = value
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_distiller(palette = "RdBu", na.value = "white") +
theme_minimal()
diff_molten
plot_rej_vs_diffs <-
function(infiles1,
infiles2,
rejections_file,
resolution,
condition_names = NULL,
offset = TRUE,
sub_range = NULL,
absolute = FALSE) {
# THIS FUNCTION DOWNSAMPLES THE DATA TO EQUAL READS FOR MORE ACCURATE COMPARISON
# infiles1, infiles2: vector/list of paths to input files for both conditions
# rejection_file: file output from test_with_FDR or test_with_FDX
# resolution: resolution of the data in base pairs, e.g. 50000
# condition names: names for axes of the heatmap
# offset: are the data 0-indexed?
# sub_range: sub index to be plotted
if (is.null(condition_names)) {
condition_names <- c("condition 1", "condition 2")
}
d <- c(
purrr::map(infiles1,
~ readr::read_tsv(.x, col_names = FALSE)) %>%
setNames(paste0("cond1_rep", seq_along(infiles1))),
purrr::map(infiles2,
~ readr::read_tsv(.x, col_names = FALSE)) %>%
setNames(paste0("cond2_rep", seq_along(infiles2)))
)
cond1 <- grep("cond1", names(d))
cond2 <- grep("cond2", names(d))
# Ensure consistent dimensions across replicates
offset <- as.numeric(offset)
maxdim <-
max(map_dbl(d, ~ max(.x$X1, .x$X2))) / resolution + offset
if (is.null(sub_range)) {
sub_range <- 1:maxdim
} else {
sub_range <-
round(sub_range[1] / resolution):round(sub_range[2] / resolution)
}
# must be lower-tri
dmat <-
purrr::map(
d,
~ Matrix::sparseMatrix(
i = .x$X2 / resolution + offset,
j = .x$X1 / resolution + offset,
x = round(.x$X3),
dims = rep(maxdim, 2)
)
)
d1 <- Reduce(`+`, dmat[cond1])
d2 <- Reduce(`+`, dmat[cond2])
rm(d)
rm(dmat)
dd <- downsample_to_equal_reads(list(d1, d2))
if(absolute) {
abs_diffs <- abs(dd[[1]] - dd[[2]])
} else {
abs_diffs <- dd[[1]] - dd[[2]]
}
rejections <- readRDS(rejections_file)
winsizes <- as.numeric(names(rejections))
if(!any(map_lgl(map(rejections, "reject"), any))) {
stop(paste0("No rejections are contained in file ", rejections_file, "."))
} else {
init_idx <- which(map_lgl(map(rejections, "reject"), any))[1]
rej_mat <- Matrix::sparseMatrix(
i = rejections[[init_idx]]$crd[which(rejections[[init_idx]]$reject)[1]],
j = rejections[[init_idx]]$crd[which(rejections[[init_idx]]$reject)[1]] + 1,
x = 1,
dims = rep(maxdim, 2)
)
for(j in seq_along(rejections)) {
if (any(rejections[[j]]$reject)) {
win_size <- winsizes[j]
rej_mat <- cpopulate_rejected_differences(
rej_mat,
rejections[[j]]$crd[rejections[[j]]$reject] - 1, win_size
)
}
}
#-------------------------------------------------------------------
# Make triangular (without diagonal) to make accurate comparisons
# Lower tri is the absolute differences between conditions,
#   upper tri are the rejections by given method
rej_mat <- Matrix::triu(rej_mat, 1)
diff_molten <- reshape2::melt(abs_diffs) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range)
rej_molten <- reshape2::melt(as.matrix(rej_mat)) %>%
dplyr::filter(Var1 %in% sub_range & Var2 %in% sub_range)
#-------------------------------------------------------------------
# plot
if(absolute) {
labels <- c(paste0("|", paste0(condition_names, collapse = "-"), "|"), "rejections")
} else {
labels <- c(paste0(condition_names, collapse = "-"), "rejections")
}
if(absolute) {
rej_p <- ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = log2(value + 1)
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
theme_minimal() +
labs(x = labels[1], y = labels[2]) +
theme(legend.position = "none")
} else {
diff_molten[diff_molten$value < 0,"value"] <- -log2(abs(diff_molten[diff_molten$value < 0,"value"]))
diff_molten[diff_molten$value > 0,"value"] <- log2(diff_molten[diff_molten$value > 0,"value"])
rej_p <- ggplot(data = dplyr::filter(rej_molten, Var1 < Var2), aes(
x = Var1,
y = Var2,
fill = value
)) +
geom_tile() +
scale_fill_distiller(limits = c(0,1), palette = "Greys", direction = 1) +
ggnewscale::new_scale("fill") +
geom_tile(
mapping = aes(
x = Var1,
y = Var2,
fill = value
),
data = dplyr::filter(diff_molten, Var1 >= Var2)
) +
coord_fixed() +
scale_fill_distiller(palette = "RdBu", na.value = "white") +
theme_minimal() +
labs(x = labels[1], y = labels[2]) +
theme(legend.position = "none")
}
return(rej_p)
}
}
plot_rej_vs_diffs(
infiles1 = ko_data,
infiles2 = parent_data,
rejections_file = "../inst/extdata/output/wfdr.rds",
resolution = 40000,
condition_names = c("knockout", "parent")
)
