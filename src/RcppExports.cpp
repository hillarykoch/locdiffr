// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cinv
arma::mat cinv(arma::mat covmat);
RcppExport SEXP _locdiffr_cinv(SEXP covmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type covmat(covmatSEXP);
    rcpp_result_gen = Rcpp::wrap(cinv(covmat));
    return rcpp_result_gen;
END_RCPP
}
// cifelse
arma::mat cifelse(const arma::mat& d);
RcppExport SEXP _locdiffr_cifelse(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cifelse(d));
    return rcpp_result_gen;
END_RCPP
}
// cgeteigs
arma::colvec cgeteigs(const arma::mat& Q);
RcppExport SEXP _locdiffr_cgeteigs(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(cgeteigs(Q));
    return rcpp_result_gen;
END_RCPP
}
// cifelse_eigvals
arma::mat cifelse_eigvals(arma::colvec eigvals, const double thresh);
RcppExport SEXP _locdiffr_cifelse_eigvals(SEXP eigvalsSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type eigvals(eigvalsSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(cifelse_eigvals(eigvals, thresh));
    return rcpp_result_gen;
END_RCPP
}
// get_ldet
double get_ldet(arma::mat Q);
RcppExport SEXP _locdiffr_get_ldet(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ldet(Q));
    return rcpp_result_gen;
END_RCPP
}
// cpopulate_true_differences
arma::sp_mat cpopulate_true_differences(arma::sp_mat& truth_mat, arma::umat& true_differences);
RcppExport SEXP _locdiffr_cpopulate_true_differences(SEXP truth_matSEXP, SEXP true_differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type truth_mat(truth_matSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type true_differences(true_differencesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpopulate_true_differences(truth_mat, true_differences));
    return rcpp_result_gen;
END_RCPP
}
// cpopulate_rejected_differences
arma::sp_mat cpopulate_rejected_differences(arma::sp_mat& rej_mat, arma::colvec& rej_list, uint win_size);
RcppExport SEXP _locdiffr_cpopulate_rejected_differences(SEXP rej_matSEXP, SEXP rej_listSEXP, SEXP win_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type rej_mat(rej_matSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type rej_list(rej_listSEXP);
    Rcpp::traits::input_parameter< uint >::type win_size(win_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpopulate_rejected_differences(rej_mat, rej_list, win_size));
    return rcpp_result_gen;
END_RCPP
}
// fastMeanFilter
NumericMatrix fastMeanFilter(NumericMatrix mat, int h);
RcppExport SEXP _locdiffr_fastMeanFilter(SEXP matSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fastMeanFilter(mat, h));
    return rcpp_result_gen;
END_RCPP
}
// cpwdist
arma::mat cpwdist(arma::colvec locs1, arma::colvec locs2);
RcppExport SEXP _locdiffr_cpwdist(SEXP locs1SEXP, SEXP locs2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type locs1(locs1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type locs2(locs2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpwdist(locs1, locs2));
    return rcpp_result_gen;
END_RCPP
}
// cmake_adj_mat
arma::sp_mat cmake_adj_mat(arma::sp_mat adj_mat, arma::colvec locsj, arma::colvec winsizes, arma::colvec cumsum_nlocs, int j);
RcppExport SEXP _locdiffr_cmake_adj_mat(SEXP adj_matSEXP, SEXP locsjSEXP, SEXP winsizesSEXP, SEXP cumsum_nlocsSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type adj_mat(adj_matSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type locsj(locsjSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type winsizes(winsizesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type cumsum_nlocs(cumsum_nlocsSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(cmake_adj_mat(adj_mat, locsj, winsizes, cumsum_nlocs, j));
    return rcpp_result_gen;
END_RCPP
}
// ctest_hierarchically
arma::mat ctest_hierarchically(std::string filepath, double alpha, arma::colvec prob_theta_equals_zero, arma::colvec rank_map);
RcppExport SEXP _locdiffr_ctest_hierarchically(SEXP filepathSEXP, SEXP alphaSEXP, SEXP prob_theta_equals_zeroSEXP, SEXP rank_mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filepath(filepathSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type prob_theta_equals_zero(prob_theta_equals_zeroSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rank_map(rank_mapSEXP);
    rcpp_result_gen = Rcpp::wrap(ctest_hierarchically(filepath, alpha, prob_theta_equals_zero, rank_map));
    return rcpp_result_gen;
END_RCPP
}
// crunif
arma::colvec crunif(unsigned int n, unsigned int seed);
RcppExport SEXP _locdiffr_crunif(SEXP nSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(crunif(n, seed));
    return rcpp_result_gen;
END_RCPP
}
// csolve_for_A_and_D
Rcpp::List csolve_for_A_and_D(arma::sp_mat& cov_cur, Rcpp::List& neighbor_list);
RcppExport SEXP _locdiffr_csolve_for_A_and_D(SEXP cov_curSEXP, SEXP neighbor_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type cov_cur(cov_curSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    rcpp_result_gen = Rcpp::wrap(csolve_for_A_and_D(cov_cur, neighbor_list));
    return rcpp_result_gen;
END_RCPP
}
// csparse_quadratic_form_symm
double csparse_quadratic_form_symm(arma::colvec& u, arma::sp_mat& A, arma::colvec& D, Rcpp::List& neighbor_list);
RcppExport SEXP _locdiffr_csparse_quadratic_form_symm(SEXP uSEXP, SEXP ASEXP, SEXP DSEXP, SEXP neighbor_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    rcpp_result_gen = Rcpp::wrap(csparse_quadratic_form_symm(u, A, D, neighbor_list));
    return rcpp_result_gen;
END_RCPP
}
// csparse_quadratic_form_asymm
double csparse_quadratic_form_asymm(arma::colvec u, arma::colvec v, arma::sp_mat A, arma::colvec D, Rcpp::List neighbor_list);
RcppExport SEXP _locdiffr_csparse_quadratic_form_asymm(SEXP uSEXP, SEXP vSEXP, SEXP ASEXP, SEXP DSEXP, SEXP neighbor_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type neighbor_list(neighbor_listSEXP);
    rcpp_result_gen = Rcpp::wrap(csparse_quadratic_form_asymm(u, v, A, D, neighbor_list));
    return rcpp_result_gen;
END_RCPP
}
// csolve_for_B_and_b
Rcpp::List csolve_for_B_and_b(arma::mat& y, arma::mat& X, arma::sp_mat& A, arma::colvec& D, Rcpp::List& neighbor_list, arma::mat& precision_beta);
RcppExport SEXP _locdiffr_csolve_for_B_and_b(SEXP ySEXP, SEXP XSEXP, SEXP ASEXP, SEXP DSEXP, SEXP neighbor_listSEXP, SEXP precision_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type precision_beta(precision_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(csolve_for_B_and_b(y, X, A, D, neighbor_list, precision_beta));
    return rcpp_result_gen;
END_RCPP
}
// cmake_one_pred_sparse
arma::mat cmake_one_pred_sparse(Rcpp::List& neighbor_list, arma::mat& y, arma::mat& s, arma::mat& X, arma::mat& cond_cov, int BOOT, unsigned int SEED);
RcppExport SEXP _locdiffr_cmake_one_pred_sparse(SEXP neighbor_listSEXP, SEXP ySEXP, SEXP sSEXP, SEXP XSEXP, SEXP cond_covSEXP, SEXP BOOTSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cond_cov(cond_covSEXP);
    Rcpp::traits::input_parameter< int >::type BOOT(BOOTSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(cmake_one_pred_sparse(neighbor_list, y, s, X, cond_cov, BOOT, SEED));
    return rcpp_result_gen;
END_RCPP
}
// csolve_for_A_and_D_2d
Rcpp::List csolve_for_A_and_D_2d(arma::sp_mat& cov_cur, Rcpp::List& neighbor_list);
RcppExport SEXP _locdiffr_csolve_for_A_and_D_2d(SEXP cov_curSEXP, SEXP neighbor_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type cov_cur(cov_curSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    rcpp_result_gen = Rcpp::wrap(csolve_for_A_and_D_2d(cov_cur, neighbor_list));
    return rcpp_result_gen;
END_RCPP
}
// csparse_quadratic_form_symm_2d
double csparse_quadratic_form_symm_2d(arma::colvec& u, arma::sp_mat& A, arma::colvec& D, Rcpp::List& neighbor_list);
RcppExport SEXP _locdiffr_csparse_quadratic_form_symm_2d(SEXP uSEXP, SEXP ASEXP, SEXP DSEXP, SEXP neighbor_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    rcpp_result_gen = Rcpp::wrap(csparse_quadratic_form_symm_2d(u, A, D, neighbor_list));
    return rcpp_result_gen;
END_RCPP
}
// csparse_quadratic_form_asymm_2d
double csparse_quadratic_form_asymm_2d(arma::colvec u, arma::colvec v, arma::sp_mat A, arma::colvec D, Rcpp::List neighbor_list);
RcppExport SEXP _locdiffr_csparse_quadratic_form_asymm_2d(SEXP uSEXP, SEXP vSEXP, SEXP ASEXP, SEXP DSEXP, SEXP neighbor_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type u(uSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type neighbor_list(neighbor_listSEXP);
    rcpp_result_gen = Rcpp::wrap(csparse_quadratic_form_asymm_2d(u, v, A, D, neighbor_list));
    return rcpp_result_gen;
END_RCPP
}
// csolve_for_B_and_b_2d
Rcpp::List csolve_for_B_and_b_2d(arma::mat& y, arma::mat& X, arma::sp_mat& A, arma::colvec& D, Rcpp::List& neighbor_list, arma::mat& precision_beta);
RcppExport SEXP _locdiffr_csolve_for_B_and_b_2d(SEXP ySEXP, SEXP XSEXP, SEXP ASEXP, SEXP DSEXP, SEXP neighbor_listSEXP, SEXP precision_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type neighbor_list(neighbor_listSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type precision_beta(precision_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(csolve_for_B_and_b_2d(y, X, A, D, neighbor_list, precision_beta));
    return rcpp_result_gen;
END_RCPP
}
// ccompute_bwfdr
arma::colvec ccompute_bwfdr(arma::colvec weighted_rej, arma::colvec rej_prob, arma::colvec thresh, arma::colvec cluster_size_vec);
RcppExport SEXP _locdiffr_ccompute_bwfdr(SEXP weighted_rejSEXP, SEXP rej_probSEXP, SEXP threshSEXP, SEXP cluster_size_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type weighted_rej(weighted_rejSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rej_prob(rej_probSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type cluster_size_vec(cluster_size_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(ccompute_bwfdr(weighted_rej, rej_prob, thresh, cluster_size_vec));
    return rcpp_result_gen;
END_RCPP
}
// ccompute_bwfdx
arma::colvec ccompute_bwfdx(arma::colvec rej_prob, arma::colvec thresh, arma::colvec cluster_size_vec, double beta, arma::mat bootstrapped_theta_mat);
RcppExport SEXP _locdiffr_ccompute_bwfdx(SEXP rej_probSEXP, SEXP threshSEXP, SEXP cluster_size_vecSEXP, SEXP betaSEXP, SEXP bootstrapped_theta_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type rej_prob(rej_probSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type cluster_size_vec(cluster_size_vecSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bootstrapped_theta_mat(bootstrapped_theta_matSEXP);
    rcpp_result_gen = Rcpp::wrap(ccompute_bwfdx(rej_prob, thresh, cluster_size_vec, beta, bootstrapped_theta_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_locdiffr_cinv", (DL_FUNC) &_locdiffr_cinv, 1},
    {"_locdiffr_cifelse", (DL_FUNC) &_locdiffr_cifelse, 1},
    {"_locdiffr_cgeteigs", (DL_FUNC) &_locdiffr_cgeteigs, 1},
    {"_locdiffr_cifelse_eigvals", (DL_FUNC) &_locdiffr_cifelse_eigvals, 2},
    {"_locdiffr_get_ldet", (DL_FUNC) &_locdiffr_get_ldet, 1},
    {"_locdiffr_cpopulate_true_differences", (DL_FUNC) &_locdiffr_cpopulate_true_differences, 2},
    {"_locdiffr_cpopulate_rejected_differences", (DL_FUNC) &_locdiffr_cpopulate_rejected_differences, 3},
    {"_locdiffr_fastMeanFilter", (DL_FUNC) &_locdiffr_fastMeanFilter, 2},
    {"_locdiffr_cpwdist", (DL_FUNC) &_locdiffr_cpwdist, 2},
    {"_locdiffr_cmake_adj_mat", (DL_FUNC) &_locdiffr_cmake_adj_mat, 5},
    {"_locdiffr_ctest_hierarchically", (DL_FUNC) &_locdiffr_ctest_hierarchically, 4},
    {"_locdiffr_crunif", (DL_FUNC) &_locdiffr_crunif, 2},
    {"_locdiffr_csolve_for_A_and_D", (DL_FUNC) &_locdiffr_csolve_for_A_and_D, 2},
    {"_locdiffr_csparse_quadratic_form_symm", (DL_FUNC) &_locdiffr_csparse_quadratic_form_symm, 4},
    {"_locdiffr_csparse_quadratic_form_asymm", (DL_FUNC) &_locdiffr_csparse_quadratic_form_asymm, 5},
    {"_locdiffr_csolve_for_B_and_b", (DL_FUNC) &_locdiffr_csolve_for_B_and_b, 6},
    {"_locdiffr_cmake_one_pred_sparse", (DL_FUNC) &_locdiffr_cmake_one_pred_sparse, 7},
    {"_locdiffr_csolve_for_A_and_D_2d", (DL_FUNC) &_locdiffr_csolve_for_A_and_D_2d, 2},
    {"_locdiffr_csparse_quadratic_form_symm_2d", (DL_FUNC) &_locdiffr_csparse_quadratic_form_symm_2d, 4},
    {"_locdiffr_csparse_quadratic_form_asymm_2d", (DL_FUNC) &_locdiffr_csparse_quadratic_form_asymm_2d, 5},
    {"_locdiffr_csolve_for_B_and_b_2d", (DL_FUNC) &_locdiffr_csolve_for_B_and_b_2d, 6},
    {"_locdiffr_ccompute_bwfdr", (DL_FUNC) &_locdiffr_ccompute_bwfdr, 4},
    {"_locdiffr_ccompute_bwfdx", (DL_FUNC) &_locdiffr_ccompute_bwfdx, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_locdiffr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
