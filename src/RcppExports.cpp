// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cinv
arma::mat cinv(arma::mat covmat);
RcppExport SEXP _sgp_cinv(SEXP covmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type covmat(covmatSEXP);
    rcpp_result_gen = Rcpp::wrap(cinv(covmat));
    return rcpp_result_gen;
END_RCPP
}
// cMatern
arma::mat cMatern(arma::mat d, double range, double smoothness);
RcppExport SEXP _sgp_cMatern(SEXP dSEXP, SEXP rangeSEXP, SEXP smoothnessSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< double >::type smoothness(smoothnessSEXP);
    rcpp_result_gen = Rcpp::wrap(cMatern(d, range, smoothness));
    return rcpp_result_gen;
END_RCPP
}
// cifelse
arma::mat cifelse(const arma::mat& d);
RcppExport SEXP _sgp_cifelse(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(cifelse(d));
    return rcpp_result_gen;
END_RCPP
}
// getQ
arma::mat getQ(arma::mat maternmat, arma::mat d, double r);
RcppExport SEXP _sgp_getQ(SEXP maternmatSEXP, SEXP dSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type maternmat(maternmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(getQ(maternmat, d, r));
    return rcpp_result_gen;
END_RCPP
}
// cgeteigs
arma::colvec cgeteigs(const arma::mat& Q);
RcppExport SEXP _sgp_cgeteigs(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(cgeteigs(Q));
    return rcpp_result_gen;
END_RCPP
}
// cifelse_eigvals
arma::mat cifelse_eigvals(arma::colvec eigvals, const double thresh);
RcppExport SEXP _sgp_cifelse_eigvals(SEXP eigvalsSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type eigvals(eigvalsSEXP);
    Rcpp::traits::input_parameter< const double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(cifelse_eigvals(eigvals, thresh));
    return rcpp_result_gen;
END_RCPP
}
// get_ldet
double get_ldet(arma::mat Q);
RcppExport SEXP _sgp_get_ldet(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ldet(Q));
    return rcpp_result_gen;
END_RCPP
}
// mod
double mod(double a, double n);
RcppExport SEXP _sgp_mod(SEXP aSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mod(a, n));
    return rcpp_result_gen;
END_RCPP
}
// crun_sgp_nugget
Rcpp::List crun_sgp_nugget(double reps, int n, int p, double tau, arma::mat X, arma::mat PLDs_precision, double PLDs_ldet, double errprec, arma::mat precision_beta, arma::mat y, int iters, double aas, double bs, double rhos, double nus, double tune_var, double min_range, double max_range, double win_len, arma::mat d, arma::colvec acpt_rhos, double c0, double c1, double tune_k, arma::colvec acpt_chain, arma::colvec tune_var_chain);
RcppExport SEXP _sgp_crun_sgp_nugget(SEXP repsSEXP, SEXP nSEXP, SEXP pSEXP, SEXP tauSEXP, SEXP XSEXP, SEXP PLDs_precisionSEXP, SEXP PLDs_ldetSEXP, SEXP errprecSEXP, SEXP precision_betaSEXP, SEXP ySEXP, SEXP itersSEXP, SEXP aasSEXP, SEXP bsSEXP, SEXP rhosSEXP, SEXP nusSEXP, SEXP tune_varSEXP, SEXP min_rangeSEXP, SEXP max_rangeSEXP, SEXP win_lenSEXP, SEXP dSEXP, SEXP acpt_rhosSEXP, SEXP c0SEXP, SEXP c1SEXP, SEXP tune_kSEXP, SEXP acpt_chainSEXP, SEXP tune_var_chainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PLDs_precision(PLDs_precisionSEXP);
    Rcpp::traits::input_parameter< double >::type PLDs_ldet(PLDs_ldetSEXP);
    Rcpp::traits::input_parameter< double >::type errprec(errprecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type precision_beta(precision_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type aas(aasSEXP);
    Rcpp::traits::input_parameter< double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< double >::type nus(nusSEXP);
    Rcpp::traits::input_parameter< double >::type tune_var(tune_varSEXP);
    Rcpp::traits::input_parameter< double >::type min_range(min_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type max_range(max_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type win_len(win_lenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type acpt_rhos(acpt_rhosSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type tune_k(tune_kSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type acpt_chain(acpt_chainSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type tune_var_chain(tune_var_chainSEXP);
    rcpp_result_gen = Rcpp::wrap(crun_sgp_nugget(reps, n, p, tau, X, PLDs_precision, PLDs_ldet, errprec, precision_beta, y, iters, aas, bs, rhos, nus, tune_var, min_range, max_range, win_len, d, acpt_rhos, c0, c1, tune_k, acpt_chain, tune_var_chain));
    return rcpp_result_gen;
END_RCPP
}
// crun_sgp_correlated
Rcpp::List crun_sgp_correlated(double reps, int n, int p, double tau, arma::mat X, arma::mat PLDs_precision, double PLDs_ldet, arma::mat PLDe_precision, double PLDe_ldet, arma::mat precision_beta, arma::mat y, int iters, double aas, double bs, double rhos, double nus, double rhoe, double nue, double r, double sd_r, double tune_vars, double tune_vare, double min_range, double max_range, double win_len, arma::mat d, arma::colvec acpt_rhos, arma::colvec acpt_rhoe, double c0, double c1, double tune_k, arma::mat acpt_chain, arma::mat tune_var_chain);
RcppExport SEXP _sgp_crun_sgp_correlated(SEXP repsSEXP, SEXP nSEXP, SEXP pSEXP, SEXP tauSEXP, SEXP XSEXP, SEXP PLDs_precisionSEXP, SEXP PLDs_ldetSEXP, SEXP PLDe_precisionSEXP, SEXP PLDe_ldetSEXP, SEXP precision_betaSEXP, SEXP ySEXP, SEXP itersSEXP, SEXP aasSEXP, SEXP bsSEXP, SEXP rhosSEXP, SEXP nusSEXP, SEXP rhoeSEXP, SEXP nueSEXP, SEXP rSEXP, SEXP sd_rSEXP, SEXP tune_varsSEXP, SEXP tune_vareSEXP, SEXP min_rangeSEXP, SEXP max_rangeSEXP, SEXP win_lenSEXP, SEXP dSEXP, SEXP acpt_rhosSEXP, SEXP acpt_rhoeSEXP, SEXP c0SEXP, SEXP c1SEXP, SEXP tune_kSEXP, SEXP acpt_chainSEXP, SEXP tune_var_chainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PLDs_precision(PLDs_precisionSEXP);
    Rcpp::traits::input_parameter< double >::type PLDs_ldet(PLDs_ldetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type PLDe_precision(PLDe_precisionSEXP);
    Rcpp::traits::input_parameter< double >::type PLDe_ldet(PLDe_ldetSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type precision_beta(precision_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type aas(aasSEXP);
    Rcpp::traits::input_parameter< double >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< double >::type nus(nusSEXP);
    Rcpp::traits::input_parameter< double >::type rhoe(rhoeSEXP);
    Rcpp::traits::input_parameter< double >::type nue(nueSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sd_r(sd_rSEXP);
    Rcpp::traits::input_parameter< double >::type tune_vars(tune_varsSEXP);
    Rcpp::traits::input_parameter< double >::type tune_vare(tune_vareSEXP);
    Rcpp::traits::input_parameter< double >::type min_range(min_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type max_range(max_rangeSEXP);
    Rcpp::traits::input_parameter< double >::type win_len(win_lenSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type acpt_rhos(acpt_rhosSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type acpt_rhoe(acpt_rhoeSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< double >::type tune_k(tune_kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type acpt_chain(acpt_chainSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tune_var_chain(tune_var_chainSEXP);
    rcpp_result_gen = Rcpp::wrap(crun_sgp_correlated(reps, n, p, tau, X, PLDs_precision, PLDs_ldet, PLDe_precision, PLDe_ldet, precision_beta, y, iters, aas, bs, rhos, nus, rhoe, nue, r, sd_r, tune_vars, tune_vare, min_range, max_range, win_len, d, acpt_rhos, acpt_rhoe, c0, c1, tune_k, acpt_chain, tune_var_chain));
    return rcpp_result_gen;
END_RCPP
}
// fastMeanFilter
NumericMatrix fastMeanFilter(NumericMatrix mat, int h);
RcppExport SEXP _sgp_fastMeanFilter(SEXP matSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fastMeanFilter(mat, h));
    return rcpp_result_gen;
END_RCPP
}
// cpwdist
arma::mat cpwdist(arma::colvec locs1, arma::colvec locs2);
RcppExport SEXP _sgp_cpwdist(SEXP locs1SEXP, SEXP locs2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type locs1(locs1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type locs2(locs2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpwdist(locs1, locs2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sgp_cinv", (DL_FUNC) &_sgp_cinv, 1},
    {"_sgp_cMatern", (DL_FUNC) &_sgp_cMatern, 3},
    {"_sgp_cifelse", (DL_FUNC) &_sgp_cifelse, 1},
    {"_sgp_getQ", (DL_FUNC) &_sgp_getQ, 3},
    {"_sgp_cgeteigs", (DL_FUNC) &_sgp_cgeteigs, 1},
    {"_sgp_cifelse_eigvals", (DL_FUNC) &_sgp_cifelse_eigvals, 2},
    {"_sgp_get_ldet", (DL_FUNC) &_sgp_get_ldet, 1},
    {"_sgp_mod", (DL_FUNC) &_sgp_mod, 2},
    {"_sgp_crun_sgp_nugget", (DL_FUNC) &_sgp_crun_sgp_nugget, 26},
    {"_sgp_crun_sgp_correlated", (DL_FUNC) &_sgp_crun_sgp_correlated, 33},
    {"_sgp_fastMeanFilter", (DL_FUNC) &_sgp_fastMeanFilter, 2},
    {"_sgp_cpwdist", (DL_FUNC) &_sgp_cpwdist, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sgp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
